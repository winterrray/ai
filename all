// ttt
// ai
#include <iostream>
#include <limits>

using namespace std;

char board[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
char player = 'X', ai = 'O';

void display() {
    for (int i=0; i<9; i++) {
        if (i==0) cout << "\n|";
        if (i==3 || i==6) cout << "\n-------------\n|";
        cout << " " << board[i] << " |";
    }
}

bool isBoardFull() {
    for (char c : board) {
        if (c == ' ') {
            return false;
        }
    }
    return true;
}

bool hasWon(char currentPlayer) {
    return (board[0] == currentPlayer && board[1] == currentPlayer && board[2] == currentPlayer) ||     // row
           (board[3] == currentPlayer && board[4] == currentPlayer && board[5] == currentPlayer) ||     // row
           (board[6] == currentPlayer && board[7] == currentPlayer && board[8] == currentPlayer) ||     // row
           (board[0] == currentPlayer && board[3] == currentPlayer && board[6] == currentPlayer) ||     // col
           (board[1] == currentPlayer && board[4] == currentPlayer && board[7] == currentPlayer) ||     // col
           (board[2] == currentPlayer && board[5] == currentPlayer && board[8] == currentPlayer) ||     // col
           (board[0] == currentPlayer && board[4] == currentPlayer && board[8] == currentPlayer) ||     // diag
           (board[2] == currentPlayer && board[4] == currentPlayer && board[6] == currentPlayer);       // diag
}

bool isGameOver() {
    cout << endl << endl;
    if (hasWon(player)) {
        cout << "Player wins!" << endl;
        return true;
    }
    if (hasWon(ai)) {
        cout << "AI wins!" << endl;
        return true;
    }
    if (isBoardFull()) {
        cout << "It's a tie!" << endl;
        return true;
    }
    return false;
}

int minimax(bool isMaximizing) {
    if (hasWon(ai)) return 1;
    if (hasWon(player)) return -1;
    if (isBoardFull()) return 0;

    int bestScore = isMaximizing ? INT_MIN : INT_MAX;

    for (int i = 0; i < 9; i++) {
        if (board[i] == ' ') {
            board[i] = isMaximizing ? ai : player;
            int score = minimax(!isMaximizing);
            board[i] = ' ';
            bestScore = isMaximizing ? max(score, bestScore) : min(score, bestScore);
        }
    }
    return bestScore;
}

void aiMove() {
    int bestScore = INT_MIN;
    int move = -1;

    for (int i = 0; i < 9; i++) {
        if (board[i] == ' ') {
            board[i] = ai;
            int score = minimax(false);
            board[i] = ' ';
            if (score > bestScore) {
                bestScore = score;
                move = i;
            }
        }
    }
    board[move] = ai;
    cout << "\n\nAI chose position " << (move + 1) << endl;
    display();
}

void playerMove() {
    int move;
    while (true) {
        cout << "\nEnter your move (1-9): ";
        cin >> move;
        move -= 1;
        if (move >= 0 && move < 9 && board[move] == ' ') {
            board[move] = player;
            break;
        }
        cout << "Invalid move, try again." << endl;
    }
    display();
}

int main() {
    cout << "\nTic Tac Toe - Player vs. Computer\n";
    cout << "---------------------------------\n";

    display();

    while (true) {
        // aiMove();
        // if (isGameOver()) break;

        // playerMove();
        // if (isGameOver()) break;

        playerMove();
        if (isGameOver()) break;

        aiMove();
        if (isGameOver()) break;
    }

    return 0;
}

// non ai (pvp)
#include <iostream>

using namespace std;

char board[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
char currentPlayer = 'X';

void display() {
    for (int i = 0; i < 9; i++) {
        if (i == 0) cout << "\n|";
        if (i == 3 || i == 6) cout << "\n-------------\n|";
        cout << " " << board[i] << " |";
    }
}

bool isBoardFull() {
    for (char c : board) {
        if (c == ' ') {
            return false;
        }
    }
    return true;
}

bool hasWon(char currentPlayer) {
    return (board[0] == currentPlayer && board[1] == currentPlayer && board[2] == currentPlayer) ||     // row
           (board[3] == currentPlayer && board[4] == currentPlayer && board[5] == currentPlayer) ||     // row
           (board[6] == currentPlayer && board[7] == currentPlayer && board[8] == currentPlayer) ||     // row
           (board[0] == currentPlayer && board[3] == currentPlayer && board[6] == currentPlayer) ||     // col
           (board[1] == currentPlayer && board[4] == currentPlayer && board[7] == currentPlayer) ||     // col
           (board[2] == currentPlayer && board[5] == currentPlayer && board[8] == currentPlayer) ||     // col
           (board[0] == currentPlayer && board[4] == currentPlayer && board[8] == currentPlayer) ||     // diag
           (board[2] == currentPlayer && board[4] == currentPlayer && board[6] == currentPlayer);       // diag
}

bool isGameOver() {
    cout << endl << endl;
    if (hasWon('X')) {
        cout << "Player X wins!" << endl;
        return true;
    }
    if (hasWon('O')) {
        cout << "Player O wins!" << endl;
        return true;
    }
    if (isBoardFull()) {
        cout << "It's a tie!" << endl;
        return true;
    }
    return false;
}

void playerMove() {
    int move;
    while (true) {
        cout << "\nPlayer " << currentPlayer << ", enter your move (1-9): ";
        cin >> move;
        move -= 1;
        if (move >= 0 && move < 9 && board[move] == ' ') {
            board[move] = currentPlayer;
            break;
        }
        cout << "Invalid move, try again." << endl;
    }
    display();
}

int main() {
    cout << "\nTic Tac Toe - Player vs. Player\n";
    cout << "---------------------------------\n";

    display();

    while (true) {
        playerMove();
        if (isGameOver()) break;

        // Switch players
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    return 0;
}

// non ai (player vs comp(random))
#include <iostream>
#include <cstdlib> // For rand() and srand()
#include <ctime>   // For time()

using namespace std;

char board[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
char player = 'X', ai = 'O';

void display() {
    for (int i = 0; i < 9; i++) {
        if (i == 0) cout << "\n|";
        if (i == 3 || i == 6) cout << "\n-------------\n|";
        cout << " " << board[i] << " |";
    }
}

bool isBoardFull() {
    for (char c : board) {
        if (c == ' ') {
            return false;
        }
    }
    return true;
}

bool hasWon(char currentPlayer) {
    return (board[0] == currentPlayer && board[1] == currentPlayer && board[2] == currentPlayer) ||     // row
           (board[3] == currentPlayer && board[4] == currentPlayer && board[5] == currentPlayer) ||     // row
           (board[6] == currentPlayer && board[7] == currentPlayer && board[8] == currentPlayer) ||     // row
           (board[0] == currentPlayer && board[3] == currentPlayer && board[6] == currentPlayer) ||     // col
           (board[1] == currentPlayer && board[4] == currentPlayer && board[7] == currentPlayer) ||     // col
           (board[2] == currentPlayer && board[5] == currentPlayer && board[8] == currentPlayer) ||     // col
           (board[0] == currentPlayer && board[4] == currentPlayer && board[8] == currentPlayer) ||     // diag
           (board[2] == currentPlayer && board[4] == currentPlayer && board[6] == currentPlayer);       // diag
}

bool isGameOver() {
    cout << endl << endl;
    if (hasWon(player)) {
        cout << "Player wins!" << endl;
        return true;
    }
    if (hasWon(ai)) {
        cout << "AI wins!" << endl;
        return true;
    }
    if (isBoardFull()) {
        cout << "It's a tie!" << endl;
        return true;
    }
    return false;
}

void aiMove() {
    srand(time(0)); // Seed the random number generator

    int move;
    while (true) {
        move = rand() % 9; // Random move between 0 and 8
        if (board[move] == ' ') {
            board[move] = ai;
            cout << "\n\nAI chose position " << (move + 1) << endl;
            break;
        }
    }
    display();
}

void playerMove() {
    int move;
    while (true) {
        cout << "\nEnter your move (1-9): ";
        cin >> move;
        move -= 1;
        if (move >= 0 && move < 9 && board[move] == ' ') {
            board[move] = player;
            break;
        }
        cout << "Invalid move, try again." << endl;
    }
    display();
}

int main() {
    cout << "\nTic Tac Toe - Player vs. Computer\n";
    cout << "---------------------------------\n";

    display();

    while (true) {
        playerMove();
        if (isGameOver()) break;

        aiMove();
        if (isGameOver()) break;
    }

    return 0;
}

_________________________________________________________________________________________

// bfs dfs
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void BFS(int start, vector <vector <int>> &edges, vector <bool> &visited1, int n) {
    // int q[20], front=0, rear=0;
    queue<int> q;

    // q[rear++]=start;
    q.push(start);
    
    visited1[start] = true;

    // while (front < rear) {
    while (!q.empty()) {
    
        // int node = q[front++];
        int node = q.front();
        q.pop();

        cout << node << " ";

        if(goal == node) break;

        for (int i = node; i < edges.size(); i++) {
            if (edges[node][i] == 1 && !visited1[i]) {
                // q[rear++] = i;
                q.push(i);
                visited1[i] = true;
            }
        }
    }    
}


void DFS (int node, vector <vector <int>> &edges, vector<bool> &visited2, int n) {
    visited2[node] = true;
    cout << node << " ";

    for (int i = 0; i < n; i++) {
        if (!visited[i] && edges[node][i]==1) {
            DFS(i, edges, visited2, n);
        }
    }    
}

int main() {
    int n, e;
    cout << "Enter the number of nodes and edges: ";
    cin >> n >> e;

    vector<vector<int>> edges(n, vector<int>(n, 0));
    vector<bool> visited1(n, false);
    vector<bool> visited2(n, false);

    cout << "Enter the edges :" << endl;
    for (int i = 0; i < e; i++) {
        int u, v;
        cin >> u >> v;
        edges[u][v] = 1;
        edges[v][u] = 1;
    }

    int startNode;
    cout << "Enter the starting node: ";
    cin >> startNode;

    cout << "BFS starting from node " << startNode << ": ";
    BFS(startNode, edges, visited1, n);

    cout << "DFS starting from node " << startNode << ": ";
    DFS(startNode, edges, visited2, n);

    return 0;
}

____________________________________________________________________________________________

// bestFS
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> graph = {
    {0, 1, 0, 1},
    {1, 0, 1, 0},
    {0, 1, 0, 1},
    {1, 0, 1 ,0}
};

struct Node {
    int id;
    int h;
};

struct Compare{
    bool operator()(Node a, Node b){
        return a.h > b.h;   // min heap (smallest h at top)
    }
};

void best_first_search(int h[], int start, int goal){
    int n = graph.size();

    vector<bool> visited(n, false);
    vector<int> parent(n, -1);

    priority_queue <Node, vector<Node>, Compare> pq;

    pq.push({start, h[start]});
    
    while(!pq.empty()) {
        Node curr = pq.top();
        pq.pop();

        if(visited[curr.id]) continue;
        visited[curr.id] = true;
        cout << curr.id << " ";     // print the visited node

        // goal check
        if(curr.id == goal){
            cout << "\nReached destination" << endl;

            // print path
            cout << "Path: ";
            vector<int> path;
            for (int at = goal; at != -1; at = parent[at]) {
                path.push_back(at);
            }
            for (int i = path.size()-1; i>=0; i--) {
                cout << path[i] << " -> ";
            }
            cout << "\n";
            return;
        }

        for (int next = 0; next < n; next++) {
            if (graph[curr.id][next] == 1 && !visited[next]) {
                parent[next] = curr.id;
                pq.push({next, h[next]});
            }
        }
    }
    cout << "Not reachable!" << endl;
}

int main() {
    int h[] = {3, 11, 0, 9};
    int src = 0;
    int dest = 2;
    best_first_search(h, src, dest);
    return 0;
}

__________________________________________________________________________________________

// astar aostar
// astar
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> graph = {
    {0, 1, 0, 0, 0, 10},
    {1, 0, 2, 1, 0, 0},
    {0, 2, 0, 0, 5, 0},
    {0, 1, 0, 0, 3, 4},
    {0, 0, 5, 3, 0, 2},
    {10, 0, 0, 4, 2, 0}
};

struct Node {
    int id;
    int g;
    int f;      // g + h
};

struct Compare{
    bool operator()(Node a, Node b){
        return a.f > b.f;   // min heap (smallest f at top)
    }
};

void a_star(int h[], int start, int goal){
    int n = graph.size();
   
    vector<bool> visited(n, false);     // visited array
    vector<int> gArr(n, INT_MAX);          // distance array
    vector<int> parent(n, -1);          // parent array

    priority_queue <Node, vector<Node>, Compare> pq;     // define pq

    gArr[start] = 0;
    pq.push({start, 0, h[start]});

    while(!pq.empty()){
        Node curr = pq.top();
        pq.pop();

        if (visited[curr.id]) continue;
        visited[curr.id] = true;
        cout << curr.id << " ";

        // goal check
        if(curr.id == goal){
            cout << "\nReached Destination" << endl;

            cout << "Path costs: ";
            for (int i = 0; i < n; i++) {
                if (gArr[i] == INT_MAX)
                    cout << "INF";
                else
                    cout << gArr[i] << " ";
            }
            cout << "\n";

            // print path
            cout << "Path: ";
            vector<int> path;
            for (int at = goal; at != 1; at = parent[at]) {
                path.push_back(at);
            }
            for(int i = path.size()-1; i >= 0; i--) {
                cout << path[i] << " -> ";
            }
            cout << "\n";
            return;
        }
       
        for (int next = 0; next < n; next++) {
            if (graph[curr.id][next] == 1) {
                int new_g = gArr[curr.id] + graph[curr.id][next];
                if (new_g < gArr[next]) {
                    gArr[next] = new_g;
                    parent[next] = curr.id;
                    pq.push({next, new_g, (new_g + h[next])});
                }
            }
        }
    }
    cout << "Not reachable" << endl;
    return;
}

int main() {
    int h[] = {5, 3, 4, 2, 6, 0};
    // int start = 0;
    // int end = 5;
    a_star(h, 0, 5);
    return 0;
}

// aostar
#include <iostream>
#include <climits>
#include <vector>
using namespace std;

#define MAX_NODES 50

// Node structure to store node properties
struct Node {
    int id;                 // Unique identifier for the node
    int heuristic;          // Heuristic value of the node
    bool visited;           // Flag to check if the node is visited
    int optimal;            // Index of the optimal child
    int num_children;       // Number of children the node has
    vector<int> children;   // List of child node IDs
    vector<int> type;       // List of connection types (AND/OR)
    vector<int> cost;       // List of costs to each child node
};

// Global graph (array of nodes)
Node graph[MAX_NODES];
int num_nodes, num_connections;

void inputGraph() {
    cout << "Enter the number of nodes: ";
    cin >> num_nodes;

    cout << "Enter node id and heuristics of each node:\n";
    for (int i = 0; i < num_nodes; i++) {
        // graph[i].id = i;
        graph[i].visited = false;
        graph[i].optimal = -1;
        graph[i].num_children = 0;
        cin >> graph[i].id >> graph[i].heuristic;
    }

    cout << "Enter the number of connections: ";
    cin >> num_connections;

    cout << "Enter parent_id child_id cost AND/OR (1 for AND, 0 for OR):\n";
    for (int i = 0; i < num_connections; i++) {
        int parent, child, cost, type;
        cin >> parent >> child >> cost >> type;

        graph[parent].children.push_back(child);
        graph[parent].cost.push_back(cost);
        graph[parent].type.push_back(type);
        graph[parent].num_children++;
    }
}

void aoStar(int node) {
    if (graph[node].visited) {
        return;
    }

    graph[node].visited = true;

    int min_heuristic = INT_MAX;
    int selected_child = -1;

    for (int i = 0; i < graph[node].num_children; i++) {
        int child = graph[node].children[i];

        if (!graph[child].visited) {
            // Expand the child first
            aoStar(child);
        }

        // OR connection
        if (graph[node].type[i] == 0) {
            int current_heuristic = graph[child].heuristic + graph[node].cost[i];
            if (current_heuristic < min_heuristic) {
                min_heuristic = current_heuristic;
                selected_child = i;
            }
        }
        // AND connection
        else if (graph[node].type[i] == 1) {
            int total_cost = 0;

            for (int j = 0; j < graph[node].num_children; j++) {
                if (graph[node].type[j] == 1) {
                    int sibling = graph[node].children[j];
                    total_cost += graph[sibling].heuristic + graph[node].cost[j];
                }
            }
            if (total_cost < min_heuristic) {
                min_heuristic = total_cost;
                selected_child = i;
            }
        }
    }

    if (min_heuristic != INT_MAX) {
        graph[node].heuristic = min_heuristic;
        graph[node].optimal = selected_child;
    }
}

void printOptimalPath(int node) {
    cout << node << " ";
    if (graph[node].num_children == 0) {
        // It's a leaf node
        return;
    }

    int optimal_child = graph[node].optimal;

    if (graph[node].type[optimal_child] == 0) {
        printOptimalPath(graph[node].children[optimal_child]);
    }
    else if (graph[node].type[optimal_child] == 1) {
        for (int i = 0; i < graph[node].num_children; i++) {
            if (graph[node].type[i] == 1) {
                printOptimalPath(graph[node].children[i]);
            }
        }
    }
}

int main() {
    inputGraph();
    aoStar(0);

    cout << "\nUpdated Heuristics:\n";
    for (int i = 0; i < num_nodes; i++) {
        cout << "Node " << i << ": Heuristic = " << graph[i].heuristic << endl;
    }

    cout << "\nOptimal Path: ";
    printOptimalPath(0);
    cout << "\n";

    return 0;
}
/*
Enter the number of nodes: 10
Enter node id and heuristics of each node:
0 99
1 5
2 2
3 4
4 7
5 9
6 3
7 0
8 0
9 0
Enter the number of connections: 9
Enter parent_id child_id cost AND/OR(1 for AND, 0 for OR):
0 1 1 0
0 2 1 1
0 3 1 1
1 4 1 0
1 5 1 0
2 6 1 0
2 7 1 1
2 8 1 1
3 9 1 0

Updated Heuristics:
Node 0: Heuristic = 5
Node 1: Heuristic = 8
Node 2: Heuristic = 2
Node 3: Heuristic = 1
Node 4: Heuristic = 7
Node 5: Heuristic = 9
Node 6: Heuristic = 3
Node 7: Heuristic = 0
Node 8: Heuristic = 0
Node 6: Heuristic = 3
Node 7: Heuristic = 0
Node 8: Heuristic = 0
Node 9: Heuristic = 0

Optimal Path: 0 2 7 8 3 9
*/
________________________________________________________________________________________

// csp
#include <iostream>
using namespace std;
#define n 4

bool isSafe (bool graph[n][n], int color[n], int curr, int col) {
    for (int i = 0; i < n; i++)
        if (graph[curr][i] && col == color[i])  return false;
    return true;    
}

bool graphColor (bool graph[n][n], int color[n], int curr, int m) {
    if (curr == n) return true;

    for (int col = 1; col <= m; col++) {
        if (isSafe(graph, color, curr, col)) {
            color[curr] = col;
            if (graphColor(graph, color, curr+1, m)) return true;
            color[curr] = 0;
        }
    }
    return false;    
}

int main() {
    int m;
    cout << "enter chromatic number : ";
    cin >> m;

    bool graph[n][n];
    cout << "enter graph matrix : ";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> graph[i][j];
        }        
    }
    // bool graph[n][n] = {
    //     {0,1,1,1},
    //     {1,0,1,0},
    //     {1,1,0,1},
    //     {1,0,1,0}
    // };

    // m=3;

    int color[n]={0};

    if (graphColor(graph, color, 0, m) == false) {
        cout << "No solution";
        return 0;
    }
    
    cout << "Assigned colors : " << endl;
    for (int i=0; i<n; i++) {
        cout << i << " -> " << color[i] << endl;
    }
    return 0;
}

_________________________________________________________________________________________

// expert system
symptom(cold, [fever, runny_nose, headache]).
symptom(allergy, [red_eyes, runny_nose, itching]).
symptom(covid, [runny_nose, cough, fever, lost_taste]).

:- dynamic(user_has/1).

ask(Symptom) :-
    write('Do you have '), write(Symptom), write('? (yes/no): '), nl,
    read(Response),
    ( Response = yes -> assertz(user_has(Symptom)); true ).

count_matches(Disease, Count) :-
    symptom(Disease, Symptoms),
    findall(Symptom, (member(Symptom, Symptoms), user_has(Symptom)), MatchingSymptoms),
    length(MatchingSymptoms, Count).

start :-
    retractall(user_has(_)),

    ask(fever),
    ask(runny_nose),
    ask(headache),
    ask(red_eyes),
    ask(itching),
    ask(cough),
    ask(lost_taste),

    findall([Count, Disease], (symptom(Disease, _), count_matches(Disease, Count)), Matches),
    sort(Matches, SortedMatches),
    reverse(SortedMatches, [[BestCount, BestDisease]|_]),
    ( BestCount > 0 ->
        write('You most likely have: '), write(BestDisease), nl
    ; write('MAST HAI TU! You are fine!'), nl ).
