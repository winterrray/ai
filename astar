// astar
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> graph = {
    {0, 1, 0, 0, 0, 10},
    {1, 0, 2, 1, 0, 0},
    {0, 2, 0, 0, 5, 0},
    {0, 1, 0, 0, 3, 4},
    {0, 0, 5, 3, 0, 2},
    {10, 0, 0, 4, 2, 0}
};

struct Node {
    int id;
    int g;
    int f;      // g + h
};

struct Compare{
    bool operator()(Node a, Node b){
        return a.f > b.f;   // min heap (smallest f at top)
    }
};

void a_star(int h[], int start, int goal){
    int n = graph.size();
   
    vector<bool> visited(n, false);     // visited array
    vector<int> gArr(n, INT_MAX);          // distance array
    vector<int> parent(n, -1);          // parent array

    priority_queue <Node, vector<Node>, Compare> pq;     // define pq

    gArr[start] = 0;
    pq.push({start, 0, h[start]});

    while(!pq.empty()){
        Node curr = pq.top();
        pq.pop();

        if (visited[curr.id]) continue;
        visited[curr.id] = true;
        cout << curr.id << " ";

        // goal check
        if(curr.id == goal){
            cout << "\nReached Destination" << endl;

            cout << "Path costs: ";
            for (int i = 0; i < n; i++) {
                if (gArr[i] == INT_MAX)
                    cout << "INF";
                else
                    cout << gArr[i] << " ";
            }
            cout << "\n";

            // print path
            cout << "Path: ";
            vector<int> path;
            for (int at = goal; at != 1; at = parent[at]) {
                path.push_back(at);
            }
            for(int i = path.size()-1; i >= 0; i--) {
                cout << path[i] << " -> ";
            }
            cout << "\n";
            return;
        }
       
        for (int next = 0; next < n; next++) {
            if (graph[curr.id][next] == 1) {
                int new_g = gArr[curr.id] + graph[curr.id][next];
                if (new_g < gArr[next]) {
                    gArr[next] = new_g;
                    parent[next] = curr.id;
                    pq.push({next, new_g, (new_g + h[next])});
                }
            }
        }
    }
    cout << "Not reachable" << endl;
    return;
}

int main() {
    int h[] = {5, 3, 4, 2, 6, 0};
    // int start = 0;
    // int end = 5;
    a_star(h, 0, 5);
    return 0;
}

// aostar
#include <iostream>
#include <climits>
#include <vector>
using namespace std;

#define MAX_NODES 50

// Node structure to store node properties
struct Node {
    int id;                 // Unique identifier for the node
    int heuristic;          // Heuristic value of the node
    bool visited;           // Flag to check if the node is visited
    int optimal;            // Index of the optimal child
    int num_children;       // Number of children the node has
    vector<int> children;   // List of child node IDs
    vector<int> type;       // List of connection types (AND/OR)
    vector<int> cost;       // List of costs to each child node
};

// Global graph (array of nodes)
Node graph[MAX_NODES];
int num_nodes, num_connections;

void inputGraph() {
    cout << "Enter the number of nodes: ";
    cin >> num_nodes;

    cout << "Enter node id and heuristics of each node:\n";
    for (int i = 0; i < num_nodes; i++) {
        // graph[i].id = i;
        graph[i].visited = false;
        graph[i].optimal = -1;
        graph[i].num_children = 0;
        cin >> graph[i].id >> graph[i].heuristic;
    }

    cout << "Enter the number of connections: ";
    cin >> num_connections;

    cout << "Enter parent_id child_id cost AND/OR (1 for AND, 0 for OR):\n";
    for (int i = 0; i < num_connections; i++) {
        int parent, child, cost, type;
        cin >> parent >> child >> cost >> type;

        graph[parent].children.push_back(child);
        graph[parent].cost.push_back(cost);
        graph[parent].type.push_back(type);
        graph[parent].num_children++;
    }
}

void aoStar(int node) {
    if (graph[node].visited) {
        return;
    }

    graph[node].visited = true;

    int min_heuristic = INT_MAX;
    int selected_child = -1;

    for (int i = 0; i < graph[node].num_children; i++) {
        int child = graph[node].children[i];

        if (!graph[child].visited) {
            // Expand the child first
            aoStar(child);
        }

        // OR connection
        if (graph[node].type[i] == 0) {
            int current_heuristic = graph[child].heuristic + graph[node].cost[i];
            if (current_heuristic < min_heuristic) {
                min_heuristic = current_heuristic;
                selected_child = i;
            }
        }
        // AND connection
        else if (graph[node].type[i] == 1) {
            int total_cost = 0;

            for (int j = 0; j < graph[node].num_children; j++) {
                if (graph[node].type[j] == 1) {
                    int sibling = graph[node].children[j];
                    total_cost += graph[sibling].heuristic + graph[node].cost[j];
                }
            }
            if (total_cost < min_heuristic) {
                min_heuristic = total_cost;
                selected_child = i;
            }
        }
    }

    if (min_heuristic != INT_MAX) {
        graph[node].heuristic = min_heuristic;
        graph[node].optimal = selected_child;
    }
}

void printOptimalPath(int node) {
    cout << node << " ";
    if (graph[node].num_children == 0) {
        // It's a leaf node
        return;
    }

    int optimal_child = graph[node].optimal;

    if (graph[node].type[optimal_child] == 0) {
        printOptimalPath(graph[node].children[optimal_child]);
    }
    else if (graph[node].type[optimal_child] == 1) {
        for (int i = 0; i < graph[node].num_children; i++) {
            if (graph[node].type[i] == 1) {
                printOptimalPath(graph[node].children[i]);
            }
        }
    }
}

int main() {
    inputGraph();
    aoStar(0);

    cout << "\nUpdated Heuristics:\n";
    for (int i = 0; i < num_nodes; i++) {
        cout << "Node " << i << ": Heuristic = " << graph[i].heuristic << endl;
    }

    cout << "\nOptimal Path: ";
    printOptimalPath(0);
    cout << "\n";

    return 0;
}
